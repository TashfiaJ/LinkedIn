{"ast":null,"code":"var _jsxFileName = \"/home/tashfia/Documents/linkedin/src/Components/Notification/Notification.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../Hooks/AuthContext';\nimport \"./Notification.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationsList = ({\n  username\n}) => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const authContext = useContext(AuthContext);\n\n  // Define a useEffect to fetch notifications when the component mounts and when the username changes.\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      console.log(\"Fetching notifications for username:\", username);\n      try {\n        const response = await axios.get('http://localhost:1024/get_notification', {\n          headers: {\n            'X-Username': username // Send the username in a custom header\n          }\n        });\n\n        setNotifications(response.data);\n      } catch (error) {\n        console.error('Error fetching notifications:', error);\n      }\n    };\n\n    // Call the fetchNotifications function when the component mounts or when username changes.\n    fetchNotifications();\n  }, [username]); // Specify [username] as the dependency array.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: notification\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationsList, \"a2TVg1r4unRPhyK+UGWgjfnFFjs=\");\n_c = NotificationsList;\nexport default NotificationsList;\nvar _c;\n$RefreshReg$(_c, \"NotificationsList\");","map":{"version":3,"names":["React","useEffect","useState","useContext","axios","AuthContext","jsxDEV","_jsxDEV","NotificationsList","username","_s","notifications","setNotifications","authContext","fetchNotifications","console","log","response","get","headers","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","notification","index","_c","$RefreshReg$"],"sources":["/home/tashfia/Documents/linkedin/src/Components/Notification/Notification.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../Hooks/AuthContext';\nimport \"./Notification.css\";\n\nconst NotificationsList = ({ username }) => {\n  const [notifications, setNotifications] = useState([]);\n  const authContext = useContext(AuthContext);\n\n  // Define a useEffect to fetch notifications when the component mounts and when the username changes.\n  useEffect(() => {\n    const fetchNotifications = async () => {\n      console.log(\"Fetching notifications for username:\", username);\n      try {\n        const response = await axios.get('http://localhost:1024/get_notification', {\n          headers: {\n            'X-Username': username, // Send the username in a custom header\n          },\n        });\n        setNotifications(response.data);\n      } catch (error) {\n        console.error('Error fetching notifications:', error);\n      }\n    };\n\n    // Call the fetchNotifications function when the component mounts or when username changes.\n    fetchNotifications();\n  }, [username]); // Specify [username] as the dependency array.\n\n  return (\n    <div>\n      <h1>Notifications</h1>\n      <ul>\n        {notifications.map((notification, index) => (\n          <li key={index}>{notification}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default NotificationsList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMW,WAAW,GAAGV,UAAU,CAACE,WAAW,CAAC;;EAE3C;EACAJ,SAAS,CAAC,MAAM;IACd,MAAMa,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrCC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEP,QAAQ,CAAC;MAC7D,IAAI;QACF,MAAMQ,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAC,wCAAwC,EAAE;UACzEC,OAAO,EAAE;YACP,YAAY,EAAEV,QAAQ,CAAE;UAC1B;QACF,CAAC,CAAC;;QACFG,gBAAgB,CAACK,QAAQ,CAACG,IAAI,CAAC;MACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF,CAAC;;IAED;IACAP,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,oBACEF,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBnB,OAAA;MAAAe,QAAA,EACGX,aAAa,CAACgB,GAAG,CAAC,CAACC,YAAY,EAAEC,KAAK,kBACrCtB,OAAA;QAAAe,QAAA,EAAiBM;MAAY,GAApBC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoB,CACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAAChB,EAAA,CAlCIF,iBAAiB;AAAAsB,EAAA,GAAjBtB,iBAAiB;AAoCvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}