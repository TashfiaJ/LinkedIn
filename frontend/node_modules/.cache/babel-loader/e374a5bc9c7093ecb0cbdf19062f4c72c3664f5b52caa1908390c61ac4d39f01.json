{"ast":null,"code":"var _jsxFileName = \"/home/tashfia/Documents/linkedin/src/Components/Notification/Notification.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../Hooks/AuthContext';\nimport \"./Notification.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationsList = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n  const authContext = useContext(AuthContext);\n  const [username, setUsername] = useState(\"\"); // You can set the initial value of username here\n\n  useEffect(() => {\n    // Assuming you have a way to get the username from your AuthContext or some other source\n    const user = authContext.user; // Replace this with the actual way to get the username\n\n    // Check if the user is available\n    if (user && user.username) {\n      setUsername(user.username);\n\n      // Fetch notifications when the component mounts\n      fetchNotifications(user.username);\n    }\n  }, [authContext]);\n  const fetchNotifications = async username => {\n    console.log(use);\n    try {\n      const response = await axios.get('http://localhost:1024/get_notification', {\n        headers: {\n          'X-Username': username\n        }\n      });\n      setNotifications(response.data);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notifications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: notification\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationsList, \"IbC1gm8nZV77RMEpol9vILSQ+DE=\");\n_c = NotificationsList;\nexport default NotificationsList;\nvar _c;\n$RefreshReg$(_c, \"NotificationsList\");","map":{"version":3,"names":["React","useEffect","useState","useContext","axios","AuthContext","jsxDEV","_jsxDEV","NotificationsList","_s","notifications","setNotifications","authContext","username","setUsername","user","fetchNotifications","console","log","use","response","get","headers","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","notification","index","_c","$RefreshReg$"],"sources":["/home/tashfia/Documents/linkedin/src/Components/Notification/Notification.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../../Hooks/AuthContext';\nimport \"./Notification.css\";\n\nconst NotificationsList = () => {\n  const [notifications, setNotifications] = useState([]);\n  const authContext = useContext(AuthContext);\n  const [username, setUsername] = useState(\"\"); // You can set the initial value of username here\n\n  useEffect(() => {\n    // Assuming you have a way to get the username from your AuthContext or some other source\n    const user = authContext.user; // Replace this with the actual way to get the username\n\n    // Check if the user is available\n    if (user && user.username) {\n      setUsername(user.username);\n\n      // Fetch notifications when the component mounts\n      fetchNotifications(user.username);\n    }\n  }, [authContext]);\n\n  const fetchNotifications = async (username) => {\n    console.log(use)\n    try {\n      const response = await axios.get('http://localhost:1024/get_notification', {\n        headers: {\n          'X-Username': username,\n        },\n      });\n      setNotifications(response.data);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Notifications</h1>\n      <ul>\n        {notifications.map((notification, index) => (\n          <li key={index}>{notification}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default NotificationsList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAO,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMU,WAAW,GAAGT,UAAU,CAACE,WAAW,CAAC;EAC3C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMc,IAAI,GAAGH,WAAW,CAACG,IAAI,CAAC,CAAC;;IAE/B;IACA,IAAIA,IAAI,IAAIA,IAAI,CAACF,QAAQ,EAAE;MACzBC,WAAW,CAACC,IAAI,CAACF,QAAQ,CAAC;;MAE1B;MACAG,kBAAkB,CAACD,IAAI,CAACF,QAAQ,CAAC;IACnC;EACF,CAAC,EAAE,CAACD,WAAW,CAAC,CAAC;EAEjB,MAAMI,kBAAkB,GAAG,MAAOH,QAAQ,IAAK;IAC7CI,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;IAChB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,wCAAwC,EAAE;QACzEC,OAAO,EAAE;UACP,YAAY,EAAET;QAChB;MACF,CAAC,CAAC;MACFF,gBAAgB,CAACS,QAAQ,CAACG,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC;EAED,oBACEjB,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBtB,OAAA;MAAAkB,QAAA,EACGf,aAAa,CAACoB,GAAG,CAAC,CAACC,YAAY,EAAEC,KAAK,kBACrCzB,OAAA;QAAAkB,QAAA,EAAiBM;MAAY,GAApBC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoB,CACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACpB,EAAA,CA1CID,iBAAiB;AAAAyB,EAAA,GAAjBzB,iBAAiB;AA4CvB,eAAeA,iBAAiB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}